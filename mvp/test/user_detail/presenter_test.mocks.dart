// Mocks generated by Mockito 5.1.0 from annotations
// in mvp/test/user_detail/presenter_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:ui' as _i7;

import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/material.dart' as _i2;
import 'package:misc/cubit/boolean/boolean_cubit.dart' as _i3;
import 'package:misc/model/user_detail.dart' as _i5;
import 'package:misc/model/user_overview.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mvp/user_detail/model.dart' as _i8;
import 'package:mvp/user_detail/view.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeStatefulWidget_0 extends _i1.Fake implements _i2.StatefulWidget {
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_1 extends _i1.Fake implements _i2.BuildContext {}

class _FakeBooleanCubit_2 extends _i1.Fake implements _i3.BooleanCubit {}

class _FakeWidget_3 extends _i1.Fake implements _i2.Widget {
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.Fake implements _i2.DiagnosticsNode {
  @override
  String toString(
          {_i4.TextTreeConfiguration? parentConfiguration,
          _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeUserDetail_5 extends _i1.Fake implements _i5.UserDetail {}

/// A class which mocks [ViewState].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewState extends _i1.Mock implements _i6.ViewState {
  MockViewState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StatefulWidget get widget =>
      (super.noSuchMethod(Invocation.getter(#widget),
          returnValue: _FakeStatefulWidget_0()) as _i2.StatefulWidget);
  @override
  _i2.BuildContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeBuildContext_1()) as _i2.BuildContext);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  bool get init =>
      (super.noSuchMethod(Invocation.getter(#init), returnValue: false)
          as bool);
  @override
  set init(bool? _init) => super.noSuchMethod(Invocation.setter(#init, _init),
      returnValueForMissingStub: null);
  @override
  _i3.BooleanCubit get loadingBloc =>
      (super.noSuchMethod(Invocation.getter(#loadingBloc),
          returnValue: _FakeBooleanCubit_2()) as _i3.BooleanCubit);
  @override
  void initState() => super.noSuchMethod(Invocation.method(#initState, []),
      returnValueForMissingStub: null);
  @override
  _i2.Widget build(_i2.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget_3()) as _i2.Widget);
  @override
  void done(dynamic data) =>
      super.noSuchMethod(Invocation.method(#done, [data]),
          returnValueForMissingStub: null);
  @override
  void error(Exception? e) => super.noSuchMethod(Invocation.method(#error, [e]),
      returnValueForMissingStub: null);
  @override
  void didUpdateWidget(_i2.StatefulWidget? oldWidget) =>
      super.noSuchMethod(Invocation.method(#didUpdateWidget, [oldWidget]),
          returnValueForMissingStub: null);
  @override
  void reassemble() => super.noSuchMethod(Invocation.method(#reassemble, []),
      returnValueForMissingStub: null);
  @override
  void setState(_i7.VoidCallback? fn) =>
      super.noSuchMethod(Invocation.method(#setState, [fn]),
          returnValueForMissingStub: null);
  @override
  void deactivate() => super.noSuchMethod(Invocation.method(#deactivate, []),
      returnValueForMissingStub: null);
  @override
  void activate() => super.noSuchMethod(Invocation.method(#activate, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void didChangeDependencies() =>
      super.noSuchMethod(Invocation.method(#didChangeDependencies, []),
          returnValueForMissingStub: null);
  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  _i2.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i4.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_4()) as _i2.DiagnosticsNode);
  @override
  void showLoading() => super.noSuchMethod(Invocation.method(#showLoading, []),
      returnValueForMissingStub: null);
  @override
  void hideLoading() => super.noSuchMethod(Invocation.method(#hideLoading, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [Model].
///
/// See the documentation for Mockito's code generation for more information.
class MockModel extends _i1.Mock implements _i8.Model {
  MockModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<dynamic> fetchUserDetail(String? login) =>
      (super.noSuchMethod(Invocation.method(#fetchUserDetail, [login]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<_i5.UserDetail> getUserDetail(_i10.UserOverview? user) =>
      (super.noSuchMethod(Invocation.method(#getUserDetail, [user]),
              returnValue: Future<_i5.UserDetail>.value(_FakeUserDetail_5()))
          as _i9.Future<_i5.UserDetail>);
  @override
  void destroy() => super.noSuchMethod(Invocation.method(#destroy, []),
      returnValueForMissingStub: null);
}
